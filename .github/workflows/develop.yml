name: deploy-DEV

on:
  push:
    tags:
      - dev-*-*

permissions:
  id-token: write
  contents: read

env:
  AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
  AWS_IAM: 583388259455
  AWS_DEFAULT_REGION: ap-southeast-1


jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_ID: ${{ steps.extract_clientId.outputs.CLIENT_ID }}
      CF_DIST_ID: ${{ steps.extractDeployEnv.outputs.CF_DIST_ID }}
      S3_BUCKET: ${{ steps.extractDeployEnv.outputs.S3_BUCKET }}
    steps:
      - id: extract_clientId
        run: |
          TAG_NAME=$(echo $GITHUB_REF | sed 's|refs/tags/dev-||')
          CLIENT_ID=$(echo $TAG_NAME | sed 's|-.*||')
          CLIENT_ID_UPPER=$(echo $CLIENT_ID | tr '[:lower:]' '[:upper:]')
          CLIENT_ID_LOWER=$(echo $CLIENT_ID | tr '[:upper:]' '[:lower:]')
          echo "CLIENT_ID=$CLIENT_ID_UPPER" >> "$GITHUB_OUTPUT"
          echo "TENANT=$CLIENT_ID_LOWER" >> "$GITHUB_ENV"
          echo "CLIENT_ID_UPPER=$CLIENT_ID_UPPER" >> "$GITHUB_ENV"
      - name: Call API with try-catch and logging
        run: |
          {
            echo "Calling API..."
            API_RESPONSE=$(curl -H "Authorization: Bearer test" \
                                -H "Content-Type: application/json" \
                                -s -w "\nHTTP_STATUS:%{http_code}" \
                                "https://api.eazy-mock.teqn.asia/mock/c3fb40dc-bdd8-442b-9b59-c77cc4aef7e4/184/env-deploy/${{env.TENANT}}")
            
            HTTP_STATUS=$(echo "$API_RESPONSE" | grep HTTP_STATUS | cut -d':' -f2)
            BODY=$(echo "$API_RESPONSE" | sed '$d')
            
            echo "API Response Status: $HTTP_STATUS"
            echo "API Response Body:"
            echo "$BODY" | jq '.'
            
            if [ "$HTTP_STATUS" -ne 200 ]; then
              echo "API call failed with status $HTTP_STATUS"
              exit 1
            fi
            
            echo "Parsing JSON and setting environment variables..."
            echo "$BODY" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
            
            echo "Environment variables set successfully."
          } || {
            echo "Error: API call or JSON parsing failed"
            exit 1
          }
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ env.AWS_IAM }}:role/test-get-secrets
      #     aws-region: ${{ env.AWS_DEFAULT_REGION }}
      # - name: Get secrets from AWS Secrets Manager
      #   run: |
      #     SECRETS=$(aws secretsmanager get-secret-value --secret-id multiTenantEnv --query SecretString --output text)
      #     echo "$SECRETS" | jq .
      #     echo "$SECRETS" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      - id: extractDeployEnv
        run: |
          CF_DIST_ID=${{env.CF_DIST_ID}}
          echo "CF_DIST_ID=$CF_DIST_ID" >> "$GITHUB_OUTPUT"
          S3_BUCKET=${{env.S3_BUCKET}}
          echo "S3_BUCKET=$S3_BUCKET" >> "$GITHUB_OUTPUT"

  build:
    needs: [prebuild]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - uses: ./.github/actions/build
        with:
          CLIENT_ID: ${{needs.prebuild.outputs.CLIENT_ID}}

  deploy:
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    env:
      CLIENT_ID: ${{needs.prebuild.outputs.CLIENT_ID}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - uses: ./.github/actions/deploy
        with:
          CF_DIST_ID: ${{needs.prebuild.outputs.CF_DIST_ID}}
          S3_BUCKET: ${{needs.prebuild.outputs.S3_BUCKET}}



