name: deploy-DEV

on:
  push:
    tags:
      - dev-*-*

permissions:
  id-token: write
  contents: read

env:
  AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}
  AWS_IAM: 163945472220
  AWS_DEFAULT_REGION: ap-southeast-1
  APP_ID: e0b74hp
  ENV_ID: vd8ye42
  CONFIG_ID: vmylxxn
  # FSTANDARD_CF_DIST_ID: 'E180JSU5L1WAE9'
  # FSTANDARD_S3_BUCKET: 's3://s3-cicd-github-bucket'
  # FINATEXTHD_CF_DIST_ID: 'E11F5KND1G7976'
  # FINATEXTHD_S3_BUCKET: 's3://s3-bucket-tenant-2'

jobs:
  prebuild:
    runs-on: ubuntu-latest
    outputs:
      CLIENT_ID: ${{ steps.extract_clientId.outputs.CLIENT_ID }}
      CF_DIST_ID: ${{ steps.extractDeployEnv.outputs.CF_DIST_ID }}
      S3_BUCKET: ${{ steps.extractDeployEnv.outputs.S3_BUCKET }}
    steps:
      - id: extract_clientId
        run: |
          TAG_NAME=$(echo $GITHUB_REF | sed 's|refs/tags/dev-||')
          CLIENT_ID=$(echo $TAG_NAME | sed 's|-.*||')
          CLIENT_ID_UPPER=$(echo $CLIENT_ID | tr '[:lower:]' '[:upper:]')
          CLIENT_ID_LOWER=$(echo $CLIENT_ID | tr '[:upper:]' '[:lower:]')
          echo "CLIENT_ID=$CLIENT_ID_UPPER" >> "$GITHUB_OUTPUT"
          echo "TENANT=$CLIENT_ID_LOWER" >> "$GITHUB_ENV"
          echo "CLIENT_ID_UPPER=$CLIENT_ID_UPPER" >> "$GITHUB_ENV"
      # - name: Call API get env
      #   run: |
      #     {
      #       echo "Calling API..."
      #       API_RESPONSE=$(curl -H "Authorization: Bearer test" \
      #                           -H "Content-Type: application/json" \
      #                           -s -w "\nHTTP_STATUS:%{http_code}" \
      #                           "https://api.eazy-mock.teqn.asia/mock/c3fb40dc-bdd8-442b-9b59-c77cc4aef7e4/184/env-deploy/${{env.TENANT}}")
            
      #       HTTP_STATUS=$(echo "$API_RESPONSE" | grep HTTP_STATUS | cut -d':' -f2)
      #       BODY=$(echo "$API_RESPONSE" | sed '$d')
            
      #       if [ "$HTTP_STATUS" -ne 200 ]; then
      #         echo "API call failed with status $HTTP_STATUS"
      #         exit 1
      #       fi

      #       echo "$BODY" | jq .
            
      #       echo "$BODY" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
            
      #     } || {
      #       echo "Error: API call or JSON parsing failed"
      #       exit 1
      #     }
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_IAM }}:role/faa-appconfig-role
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Fetch AppConfig data
        run: |
          TEMP_FILE=$(mktemp)

          aws appconfig get-configuration \
            --application $APP_ID \
            --environment $ENV_ID \
            --configuration $CONFIG_ID \
            --client-id GitHub-Action-${GITHUB_RUN_ID} \
            $TEMP_FILE

          RAW_CONFIG=$(cat $TEMP_FILE | jq -r '.Content')
          echo "Raw config: $RAW_CONFIG"

          DECODED_CONFIG=$(echo $RAW_CONFIG | base64 --decode)
          echo "Decoded config: $DECODED_CONFIG"

          echo "APP_CONFIG<<EOF" >> $GITHUB_ENV
          echo "$DECODED_CONFIG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          rm $TEMP_FILE
      # - name: Get secrets from AWS Secrets Manager
      #   run: |
      #     SECRETS=$(aws secretsmanager get-secret-value --secret-id multiTenantEnv --query SecretString --output text)
      #     echo "$SECRETS" | jq .
      #     echo "$SECRETS" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
      - id: extractDeployEnv
        run: |
          CF_DIST_ID=${{env[format('{0}_CF_DIST_ID', env.CLIENT_ID_UPPER)]}}
          echo "CF_DIST_ID=$CF_DIST_ID" >> "$GITHUB_OUTPUT"
          S3_BUCKET=${{env[format('{0}_S3_BUCKET', env.CLIENT_ID_UPPER)]}}
          echo "S3_BUCKET=$S3_BUCKET" >> "$GITHUB_OUTPUT"

  build:
    needs: [prebuild]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - uses: ./.github/actions/build
        with:
          CLIENT_ID: ${{needs.prebuild.outputs.CLIENT_ID}}

  deploy:
    needs: [prebuild, build]
    runs-on: ubuntu-latest
    env:
      CLIENT_ID: ${{needs.prebuild.outputs.CLIENT_ID}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
            
      - uses: ./.github/actions/deploy
        with:
          CF_DIST_ID: ${{needs.prebuild.outputs.CF_DIST_ID}}
          S3_BUCKET: ${{needs.prebuild.outputs.S3_BUCKET}}



